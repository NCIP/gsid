package gov.nih.nci.cagrid.identifiers.client;

import gov.nih.nci.cacoresdk.util.GridAuthenticationClient;
import gov.nih.nci.cagrid.identifiers.common.IdentifiersNAServiceI;

import java.io.FileInputStream;
import java.rmi.RemoteException;
import java.util.Properties;

import namingauthority.IdentifierData;
import namingauthority.KeyData;
import namingauthority.KeyNameData;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class IdentifiersNAServiceClient extends IdentifiersNAServiceClientBase implements IdentifiersNAServiceI {	
	
//	private static final String CLIENT_PROPERTIES = "etc/client.properties";
//	private static final String SYNC_DESCRIPTION  = "sync.description";
//	
//	protected static Properties props = null;
//	static{
//		props=readProperties();
//	}
//	
//	private static Properties readProperties () {
//		Properties properties = new Properties();
//       	try {
//       		properties.load(new FileInputStream(CLIENT_PROPERTIES));
//       	}
//        catch (Exception e) {
//        	// TODO: Display appropriate client error 
//        	System.out.println("Exception while accessing " + CLIENT_PROPERTIES + " : " + e.getMessage());
//        	System.exit(-1);
//        }
//        
//        return properties;
//	}

	public IdentifiersNAServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public IdentifiersNAServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public IdentifiersNAServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public IdentifiersNAServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(IdentifiersNAServiceClient.class.getName() + " -url <service url>");
	}
	
//	private static void syncTrust() {
//		System.out.println("Synchronize Once...");
//		GridAuthenticationClient.synchronizeOnce(
//               props.getProperty(SYNC_DESCRIPTION));
//		System.out.println("Synchronize Complete.");
//	}

	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
	    
//		try{
//		if(true){//!(args.length < 2)){
//			if(true){//args[0].equals("-url")){
//				GlobusCredential creds = null;
//		        try {
//		        	syncTrust();
//		        	String userId="";
//		        	String password="";
//		        	String authenticationServiceURL="https://dorian.training.cagrid.org:8443/wsrf/services/cagrid/Dorian";
//		        	String dorianURL="https://dorian.training.cagrid.org:8443/wsrf/services/cagrid/Dorian";
//		        	creds=GridAuthenticationClient.authenticate(dorianURL, authenticationServiceURL, userId, password);
//		           System.out.println("Using proxy with id= " + creds.getIdentity() + " and lifetime "
//		                            + creds.getTimeLeft());
//		        } catch (Exception e1) {
//		           System.out.println("No proxy file loaded so running with no credentials\n"+e1.getMessage());
//		           e1.getStackTrace();
//		        }
//
//			  IdentifiersNAServiceClient client = new IdentifiersNAServiceClient("https://lslr2-vm2.semanticbits.com:8443/wsrf/services/cagrid/IdentifiersNAService",creds);
////			  client.setAnonymousPrefered(true);
//			  client.registerSite("a", "a", "a", "a", "a", "a", "a");
//			  System.out.println("The identifier is "+client.registerGSID(null, null));
//
//
//			} else {
//				usage();
//				System.exit(1);
//			}
//		} else {
//			usage();
//			System.exit(1);
//		}
//		} catch (Exception e) {
//			e.printStackTrace();
//			System.exit(1);
//		}
	}	

  /******
   * This method is used to get the data associated with an identifier. This method is a non authentication oriented operation.
   * @param identifier
   * @return Identifier data.
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   */

  /****
  * This method is used to register GSID in to the database of the GSID. This method is an authentication oriented operation.
  * @param suggestedIdentifier is an optional parameter (can be null) which is used to register an non existing identifier. If the identifier already exists then new identifier is generated and returned.
  * @param parentIdentifiers is an array of identifiers which are already registered and exists in the database.
  * @return registered identifier.
  * @throws RemoteException
  * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
  * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
  * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
  * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
  */

  /*****************************
   * This method is used to add an identifier to a site. This method is an authentication oriented operation. The identifier should exists in the database.
   * @param identifier is an existing GSID to which you would like to attach your site data.
   * @return
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   */

  /**********************************
   * This method is used to generate a batch of identifiers. This method is a non authentication oriented operation.
   * @param numOfIdentifiers is the number of identifiers you are requesting for should be between 1 and 100.
   * @return array of identifiers.
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   */

  /****************************************
   * This method is used to get the parent hierarchy details about the identifiers. This method is a non authentication oriented operation.
   * @param identifier is the GSID for which you would like to get parent hierarchy information.
   * @return a tree representing the parent hierarchy.
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   */

  /*****************************************
   * This method is used to get the child hierarchy details about the identifiers.
   * This method is a non authentication oriented operation.
   * @param identifier is the GSID for which you would like to get child hierarchy information.
   * @return a tree representing the child hierarchy.
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   */

  /******************************
   * This method is used to register site information related to a globus credential.
   * This is an authentication oriented operation. This operation should be executed
   * before any other authentication operation for a new globus credential.
   * Throws an exception if the globus credentials has already registered a site.
   * @param application is the name of the application
   * @param applicationURL is the URL of the application
   * @param applicationVersion is the version of the application
   * @param contactName is the contact of the site.
   * @param contactEmail is the email address of the contact of the site.
   * @param contactPhone is the phone number of the contact.
   * @param organization is the organization of the site.
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault
   */

  /**************************************************
   * This method checks if the identifier exists in the database or not.
   * if identifier does not exists returns true else false.
   * This is a non authentication oriented operation.
   * @param identifier
   * @return
   * @throws RemoteException
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault
   * @throws gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault
   */

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public namingauthority.IdentifierData resolveIdentifier(java.lang.String identifier) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"resolveIdentifier");
    gov.nih.nci.cagrid.identifiers.stubs.ResolveIdentifierRequest params = new gov.nih.nci.cagrid.identifiers.stubs.ResolveIdentifierRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.ResolveIdentifierResponse boxedResult = portType.resolveIdentifier(params);
    return boxedResult.getIdentifierData();
    }
  }

  public java.lang.String registerGSID(java.lang.String suggestedIdentifier,java.lang.String[] parentIdentifiers) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"registerGSID");
    gov.nih.nci.cagrid.identifiers.stubs.RegisterGSIDRequest params = new gov.nih.nci.cagrid.identifiers.stubs.RegisterGSIDRequest();
    params.setSuggestedIdentifier(suggestedIdentifier);
    params.setParentIdentifiers(parentIdentifiers);
    gov.nih.nci.cagrid.identifiers.stubs.RegisterGSIDResponse boxedResult = portType.registerGSID(params);
    return boxedResult.getResponse();
    }
  }

  public org.apache.axis.types.URI addSite(java.lang.String identifier) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addSite");
    gov.nih.nci.cagrid.identifiers.stubs.AddSiteRequest params = new gov.nih.nci.cagrid.identifiers.stubs.AddSiteRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.AddSiteResponse boxedResult = portType.addSite(params);
    return boxedResult.getIdentifier();
    }
  }

  public java.lang.String[] generateIdentifiers(int numOfIdentifiers) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"generateIdentifiers");
    gov.nih.nci.cagrid.identifiers.stubs.GenerateIdentifiersRequest params = new gov.nih.nci.cagrid.identifiers.stubs.GenerateIdentifiersRequest();
    params.setNumOfIdentifiers(numOfIdentifiers);
    gov.nih.nci.cagrid.identifiers.stubs.GenerateIdentifiersResponse boxedResult = portType.generateIdentifiers(params);
    return boxedResult.getResponse();
    }
  }

  public namingauthority.Tree getParentHierarchy(java.lang.String identifier) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getParentHierarchy");
    gov.nih.nci.cagrid.identifiers.stubs.GetParentHierarchyRequest params = new gov.nih.nci.cagrid.identifiers.stubs.GetParentHierarchyRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.GetParentHierarchyResponse boxedResult = portType.getParentHierarchy(params);
    return boxedResult.getTree();
    }
  }

  public namingauthority.Tree getChildHierarchy(java.lang.String identifier) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getChildHierarchy");
    gov.nih.nci.cagrid.identifiers.stubs.GetChildHierarchyRequest params = new gov.nih.nci.cagrid.identifiers.stubs.GetChildHierarchyRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.GetChildHierarchyResponse boxedResult = portType.getChildHierarchy(params);
    return boxedResult.getTree();
    }
  }

  public void registerSite(java.lang.String application,java.lang.String applicationURL,java.lang.String applicationVersion,java.lang.String contactName,java.lang.String contactEmail,java.lang.String contactPhone,java.lang.String organization) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthoritySecurityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"registerSite");
    gov.nih.nci.cagrid.identifiers.stubs.RegisterSiteRequest params = new gov.nih.nci.cagrid.identifiers.stubs.RegisterSiteRequest();
    params.setApplication(application);
    params.setApplicationURL(applicationURL);
    params.setApplicationVersion(applicationVersion);
    params.setContactName(contactName);
    params.setContactEmail(contactEmail);
    params.setContactPhone(contactPhone);
    params.setOrganization(organization);
    gov.nih.nci.cagrid.identifiers.stubs.RegisterSiteResponse boxedResult = portType.registerSite(params);
    }
  }

  public boolean validateIdentifier(java.lang.String identifier) throws RemoteException, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierFault, gov.nih.nci.cagrid.identifiers.stubs.types.InvalidIdentifierValuesFault, gov.nih.nci.cagrid.identifiers.stubs.types.NamingAuthorityConfigurationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"validateIdentifier");
    gov.nih.nci.cagrid.identifiers.stubs.ValidateIdentifierRequest params = new gov.nih.nci.cagrid.identifiers.stubs.ValidateIdentifierRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.ValidateIdentifierResponse boxedResult = portType.validateIdentifier(params);
    return boxedResult.isResponse();
    }
  }

}
